from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
import aiohttp
import os
import json

API_TOKEN = os.getenv("API_TOKEN")
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –§–∞–π–ª —Å –±–∞–∑–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USERS_FILE = "users.json"
if os.path.exists(USERS_FILE):
    with open(USERS_FILE, "r") as f:
        users = json.load(f)
else:
    users = []

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
reply_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
reply_keyboard.add(types.KeyboardButton("üì¢ –ö–∞–Ω–∞–ª—ã"))

inline_keyboard = types.InlineKeyboardMarkup(row_width=1)
inline_keyboard.add(
    types.InlineKeyboardButton("–°–ø–æ—Ä—Ç", url="https://t.me/sportsoda"),
    types.InlineKeyboardButton("–ù–æ–≤–æ—Å—Ç–∏ –ü—Ä–æ—Ñ–∫–æ–º–∞", url="https://t.me/profkomsoda"),
    types.InlineKeyboardButton("–§–∞–±—Ä–∏–∫–∞ –∏–¥–µ–π", url="https://t.me/your_invest_channel"),
)

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    if message.from_user.id not in users:
        users.append(message.from_user.id)
        with open(USERS_FILE, "w") as f:
            json.dump(users, f)
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é –Ω–∏–∂–µ.", reply_markup=reply_keyboard)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ö–∞–Ω–∞–ª—ã" ---
@dp.message_handler(lambda message: message.text == "üì¢ –ö–∞–Ω–∞–ª—ã")
async def channels_handler(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=inline_keyboard)

# --- –•–µ–Ω–¥–ª–µ—Ä –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–æ–≤ ---
@dp.channel_post_handler(content_types=types.ContentType.ANY)
async def channel_post_handler(message: types.Message):
    channel_title = message.chat.title
    caption = f"üì¢ –û—Ç –∫–∞–Ω–∞–ª–∞: {channel_title}\n\n{message.caption or ''}"

    for user_id in users:
        try:
            if message.content_type == types.ContentType.TEXT:
                await bot.send_message(user_id, caption)

            elif message.content_type == types.ContentType.PHOTO:
                file_id = message.photo[-1].file_id
                await send_downloaded_file(user_id, file_id, "jpg", caption)

            elif message.content_type == types.ContentType.VIDEO:
                file_id = message.video.file_id
                await send_downloaded_file(user_id, file_id, "mp4", caption, is_video=True)

            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏ –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π (documents, audios –∏ —Ç.–¥.)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

# --- –§—É–Ω–∫—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Ñ–∞–π–ª–∞ ---
async def send_downloaded_file(user_id, file_id, extension, caption, is_video=False):
    file = await bot.get_file(file_id)
    file_path = file.file_path
    url = f"https://api.telegram.org/file/bot{API_TOKEN}/{file_path}"

    temp_file = f"temp.{extension}"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as resp:
            if resp.status == 200:
                with open(temp_file, "wb") as f:
                    f.write(await resp.read())

    with open(temp_file, "rb") as f:
        if is_video:
            await bot.send_video(user_id, f, caption=caption)
        else:
            await bot.send_photo(user_id, f, caption=caption)

    os.remove(temp_file)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
