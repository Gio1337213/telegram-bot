import json
import os
from aiogram import Bot, Dispatcher, executor, types

API_TOKEN = os.getenv("API_TOKEN")  # –∏–ª–∏ –∑–∞–º–µ–Ω–∏ –Ω–∞–ø—Ä—è–º—É—é: 'your_token_here'
bot = Bot(token=API_TOKEN, parse_mode='HTML')
dp = Dispatcher(bot)

USERS_FILE = "users.json"

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def load_users():
    if os.path.exists(USERS_FILE):
        with open(USERS_FILE, 'r') as f:
            return json.load(f)
    return []

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def save_user(user_id):
    users = load_users()
    if user_id not in users:
        users.append(user_id)
        with open(USERS_FILE, 'w') as f:
            json.dump(users, f)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=["start"])
async def start_handler(message: types.Message):
    save_user(message.from_user.id)
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("–ö–∞–Ω–∞–ª—ã")
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–ù–∞–∂–º–∏—Ç–µ <b>–ö–∞–Ω–∞–ª—ã</b>, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ø–∏—Å–∫—É.", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ö–∞–Ω–∞–ª—ã"
@dp.message_handler(lambda msg: msg.text == "–ö–∞–Ω–∞–ª—ã")
async def show_channels(message: types.Message):
    inline = types.InlineKeyboardMarkup(row_width=1)
    inline.add(
        types.InlineKeyboardButton("–°–ø–æ—Ä—Ç", url="https://t.me/sportsoda"),
        types.InlineKeyboardButton("–ü—Ä–æ—Ñ–∫–æ–º", url="https://t.me/profkomsoda"),
        types.InlineKeyboardButton("–û–¢–∏–ü–ë", url="https://t.me/your_invest_channel"),
        types.InlineKeyboardButton("–§–∞–±—Ä–∏–∫–∞ –∏–¥–µ–π", url="https://t.me/your_invest_channel"),
        types.InlineKeyboardButton("–ß—Ç–æ —Ç–∞–∫–æ–µ –ë–°–ê", url="https://t.me/your_invest_channel"),
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª:", reply_markup=inline)

# –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –ø–æ—Å—Ç–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–æ–≤
@dp.channel_post_handler()
async def forward_to_users(post: types.Message):
    users = load_users()

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
    try:
        channel = await bot.get_chat(post.chat.id)
        from_info = f"<b>üì¢ –ö–∞–Ω–∞–ª:</b> {channel.title}\n\n"
    except:
        from_info = ""

    for user_id in users:
        try:
            if post.content_type == 'photo':
                await bot.send_photo(
                    user_id,
                    photo=post.photo[-1].file_id,
                    caption=from_info + (post.caption or ""),
                    parse_mode="HTML"
                )
            elif post.content_type == 'video':
                await bot.send_video(
                    user_id,
                    video=post.video.file_id,
                    caption=from_info + (post.caption or ""),
                    parse_mode="HTML"
                )
            elif post.content_type == 'text':
                await bot.send_message(
                    user_id,
                    from_info + post.text,
                    parse_mode="HTML"
                )
            else:
                await bot.send_message(
                    user_id,
                    f"{from_info}üìå –ù–æ–≤—ã–π –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ (—Ç–∏–ø: {post.content_type})",
                    parse_mode="HTML"
                )
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
