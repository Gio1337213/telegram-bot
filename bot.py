import os
import asyncpg
import re
from aiohttp import web
from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher.filters import CommandStart
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.executor import start_webhook

API_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_HOST = os.getenv("WEBHOOK_HOST")  # –ü—Ä–∏–º–µ—Ä: https://your-app.onrender.com
DB_URL = os.getenv("DATABASE_URL")
ADMIN_ID = int(os.getenv("ADMIN_ID", 0))

WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"
WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = int(os.getenv("PORT", 8000))

bot = Bot(token=API_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot)
db_pool = None

# –ö–∞—Ä—Ç–∞ –∫–∞–Ω–∞–ª–æ–≤: username -> –Ω–∞–∑–≤–∞–Ω–∏–µ
channel_map = {
    "sportsoda": "üèã Ô∏è –°–ø–æ—Ä—Ç",
    "profkomsoda": "üìú –ü—Ä–æ—Ñ–∫–æ–º",
    "FabrikaIdeySoda":  "üí° –§–∞–±—Ä–∏–∫–∞ –∏–¥–µ–π",
    "LINK":  "üìö –û–¢–∏–ü–ë"
}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏
reply_kb = ReplyKeyboardMarkup(resize_keyboard=True).add(
    KeyboardButton("üì¢ –ö–∞–Ω–∞–ª—ã"),
    KeyboardButton("üîî –ü–æ–¥–ø–∏—Å–∫–∏")
)

# –ö–Ω–æ–ø–∫–∏ —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã
inline_kb = InlineKeyboardMarkup(row_width=1).add(
    InlineKeyboardButton("üèã Ô∏è –°–ø–æ—Ä—Ç", url="https://t.me/sportsoda"),
    InlineKeyboardButton("üìú –ü—Ä–æ—Ñ–∫–æ–º", url="https://t.me/profkomsoda"),
    InlineKeyboardButton("üìö –û–¢–∏–ü–ë", url="https://t.me/FabrikaIdeySoda"),
    InlineKeyboardButton("üí° –§–∞–±—Ä–∏–∫–∞ –∏–¥–µ–π", url="https://t.me/your_invest_channel")
)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
async def create_pool():
    return await asyncpg.create_pool(dsn=DB_URL)

async def add_user(user_id):
    async with db_pool.acquire() as conn:
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS users (
                id BIGINT PRIMARY KEY
            );
            CREATE TABLE IF NOT EXISTS user_subscriptions (
                user_id BIGINT,
                channel_name TEXT,
                PRIMARY KEY (user_id, channel_name),
                FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
            );
        """)
        await conn.execute("INSERT INTO users (id) VALUES ($1) ON CONFLICT DO NOTHING", user_id)

async def get_users():
    async with db_pool.acquire() as conn:
        rows = await conn.fetch("SELECT id FROM users")
        return [row["id"] for row in rows]

# –•–µ–Ω–¥–ª–µ—Ä /start
@dp.message_handler(CommandStart())
async def start(message: types.Message):
    await add_user(message.from_user.id)
    try:
        with open("welcome.jpg", "rb") as photo:
            await message.answer_photo(photo, caption="üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–Ω–∞–ª—ã.", reply_markup=reply_kb)
    except FileNotFoundError:
        await message.answer("üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–Ω–∞–ª—ã.", reply_markup=reply_kb)

# –ö–Ω–æ–ø–∫–∞ "üì¢ –ö–∞–Ω–∞–ª—ã"
@dp.message_handler(lambda msg: msg.text == "üì¢ –ö–∞–Ω–∞–ª—ã")
async def channels(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –∫–∞–Ω–∞–ª:", reply_markup=inline_kb)

# –ö–Ω–æ–ø–∫–∞ "üîî –ü–æ–¥–ø–∏—Å–∫–∏"
@dp.message_handler(lambda msg: msg.text == "üîî –ü–æ–¥–ø–∏—Å–∫–∏")
async def manage_subscriptions(message: types.Message):
    kb = InlineKeyboardMarkup(row_width=1)
    for channel, title in channel_map.items():
        kb.add(InlineKeyboardButton(f"{title}", callback_data=f"toggle_sub:{channel}"))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:", reply_markup=kb)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥–ø–∏—Å–∫–∏/–æ—Ç–ø–∏—Å–∫–∏
@dp.callback_query_handler(lambda c: c.data.startswith("toggle_sub:"))
async def toggle_subscription(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    channel = callback.data.split(":")[1]

    async with db_pool.acquire() as conn:
        subscribed = await conn.fetchval("""
            SELECT EXISTS (
                SELECT 1 FROM user_subscriptions WHERE user_id=$1 AND channel_name=$2
            )
        """, user_id, channel)

        if subscribed:
            await conn.execute("""
                DELETE FROM user_subscriptions WHERE user_id=$1 AND channel_name=$2
            """, user_id, channel)
            await callback.answer("‚ùå –û—Ç–ø–∏—Å–∫–∞ –æ—Ç –∫–∞–Ω–∞–ª–∞", show_alert=False)
            await bot.send_message(user_id, f"‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏: <b>{channel_map.get(channel, channel)}</b>")
        else:
            await conn.execute("""
                INSERT INTO user_subscriptions (user_id, channel_name)
                VALUES ($1, $2) ON CONFLICT DO NOTHING
            """, user_id, channel)
            await callback.answer("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞", show_alert=False)
            await bot.send_message(user_id, f"‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É: <b>{channel_map.get(channel, channel)}</b>")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å—Ç–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–∞ (–≤–∫–ª—é—á–∞—è –º–µ–¥–∏–∞)
@dp.channel_post_handler(content_types=types.ContentType.ANY)
async def forward_post(message: types.Message):
    caption = message.caption or message.text or ""
    clean_caption = re.sub(r'@\w+', '', caption).strip()

    try:
        channel = await bot.get_chat(message.chat.id)
        channel_name = channel.username
        if channel_name in channel_map:
            title = channel_map[channel_name]
            post_link = f"https://t.me/{channel_name}/{message.message_id}"
            from_info = f'<b>üì¢ <a href="{post_link}">{title}</a></b>\n\n'
        else:
            return  # –∫–∞–Ω–∞–ª –Ω–µ –≤ —Å–ø–∏—Å–∫–µ ‚Äî –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
    except:
        return

    full_caption = from_info + clean_caption
    if len(full_caption) > 1024:
        full_caption = full_caption[:1020] + "..."

    async with db_pool.acquire() as conn:
        rows = await conn.fetch("""
            SELECT user_id FROM user_subscriptions WHERE channel_name=$1
        """, channel_name)
        user_ids = [r["user_id"] for r in rows]

    for uid in user_ids:
        try:
            if message.photo:
                await bot.send_photo(uid, message.photo[-1].file_id, caption=full_caption)
            elif message.video:
                await bot.send_video(uid, message.video.file_id, caption=full_caption)
            elif message.document:
                await bot.send_document(uid, message.document.file_id, caption=full_caption)
            elif message.animation:
                await bot.send_animation(uid, message.animation.file_id, caption=full_caption)
            elif message.text:
                await bot.send_message(uid, full_caption, disable_web_page_preview=True)
            else:
                await bot.send_message(uid, from_info + "üìå –ù–æ–≤—ã–π –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ.", disable_web_page_preview=True)
        except:
            pass

# Webhook
async def on_startup(dp):
    global db_pool
    db_pool = await create_pool()
    await bot.set_webhook(
        WEBHOOK_URL,
        allowed_updates=["message", "callback_query"]
    )

async def on_shutdown(dp):
    await bot.delete_webhook()
    await bot.session.close()

if __name__ == '__main__':
    start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        skip_updates=True,
        host=WEBAPP_HOST,
        port=WEBAPP_PORT,
    )
