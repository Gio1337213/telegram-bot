import json
import os
from aiogram import Bot, Dispatcher, executor, types

API_TOKEN = os.getenv("API_TOKEN")  # –∏–ª–∏ –≤—Å—Ç–∞–≤—å –Ω–∞–ø—Ä—è–º—É—é: 'your_token_here'
bot = Bot(token=API_TOKEN, parse_mode='HTML')
dp = Dispatcher(bot)

USERS_FILE = "users.json"

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def load_users():
    if os.path.exists(USERS_FILE):
        with open(USERS_FILE, 'r') as f:
            return json.load(f)
    return []

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def save_user(user_id):
    users = load_users()
    if user_id not in users:
        users.append(user_id)
        with open(USERS_FILE, 'w') as f:
            json.dump(users, f)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=["start"])
async def start_handler(message: types.Message):
    save_user(message.from_user.id)

    # –†–µ–ø–ª–∞–π-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("üì¢ –ö–∞–Ω–∞–ª—ã"))

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ + —Ç–µ–∫—Å—Ç
    photo_path = "welcome.jpg"  # –£–±–µ–¥–∏—Å—å, —á—Ç–æ —Ñ–∞–π–ª –µ—Å—Ç—å –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    caption = "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–Ω–∞–ª—ã."

    try:
        with open(photo_path, 'rb') as photo:
            await message.answer_photo(photo, caption=caption, reply_markup=keyboard)
    except FileNotFoundError:
        await message.answer(caption, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ö–∞–Ω–∞–ª—ã"
@dp.message_handler(lambda msg: msg.text == "üì¢ –ö–∞–Ω–∞–ª—ã")
async def show_channels(message: types.Message):
    inline = types.InlineKeyboardMarkup(row_width=1)
    inline.add(
        types.InlineKeyboardButton("üèã –°–ø–æ—Ä—Ç", url="https://t.me/sportsoda"),
        types.InlineKeyboardButton("üì∞ –ü—Ä–æ—Ñ–∫–æ–º", url="https://t.me/profkomsoda"),
        types.InlineKeyboardButton("üìö –û–¢–∏–ü–ë", url="https://t.me/your_invest_channel"),
        types.InlineKeyboardButton("üí° –§–∞–±—Ä–∏–∫–∞ –∏–¥–µ–π", url="https://t.me/your_invest_channel"),
        types.InlineKeyboardButton("üß† –ß—Ç–æ —Ç–∞–∫–æ–µ –ë–°–ê", url="https://t.me/your_invest_channel"),
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –∫–∞–Ω–∞–ª:", reply_markup=inline)

# –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –ø–æ—Å—Ç–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–∞
@dp.channel_post_handler()
async def forward_to_users(post: types.Message):
    users = load_users()

    # –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
    try:
        channel = await bot.get_chat(post.chat.id)
        from_info = f"<b>üì¢ –ö–∞–Ω–∞–ª:</b> <i>{channel.title}</i>\n\n"
    except:
        from_info = ""

    for user_id in users:
        try:
            if post.text:
                await bot.send_message(user_id, from_info + post.text)
            elif post.photo:
                await bot.send_photo(user_id, post.photo[-1].file_id, caption=from_info + (post.caption or ""))
            elif post.video:
                await bot.send_video(user_id, post.video.file_id, caption=from_info + (post.caption or ""))
            elif post.document:
                await bot.send_document(user_id, post.document.file_id, caption=from_info + (post.caption or ""))
            elif post.animation:
                await bot.send_animation(user_id, post.animation.file_id, caption=from_info + (post.caption or ""))
            else:
                await bot.send_message(user_id, from_info + "üìå –ù–æ–≤—ã–π –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ.")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
