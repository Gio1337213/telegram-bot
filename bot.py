import os
import json
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher.webhook import get_new_configured_app
from aiogram.dispatcher.filters import CommandStart
from aiohttp import web

API_TOKEN = os.getenv("API_TOKEN")
WEBHOOK_HOST = os.getenv("WEBHOOK_HOST", "https://telegram-bot-fa47.onrender.com")  # –ø—Ä–∏–º–µ—Ä: https://your-app.onrender.com
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"
WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = int(os.getenv("PORT", default=3000))
USERS_FILE = "users.json"

bot = Bot(token=API_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
reply_kb = ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton("üì¢ –ö–∞–Ω–∞–ª—ã"))
inline_kb = InlineKeyboardMarkup(row_width=1).add(
    InlineKeyboardButton("üèã –°–ø–æ—Ä—Ç", url="https://t.me/sportsoda"),
    InlineKeyboardButton("üì∞ –ü—Ä–æ—Ñ–∫–æ–º", url="https://t.me/profkomsoda"),
    InlineKeyboardButton("üìö –û–¢–∏–ü–ë", url="https://t.me/your_invest_channel"),
    InlineKeyboardButton("üí° –§–∞–±—Ä–∏–∫–∞ –∏–¥–µ–π", url="https://t.me/your_invest_channel"),
    InlineKeyboardButton("üß† –ß—Ç–æ —Ç–∞–∫–æ–µ –ë–°–ê", url="https://t.me/your_invest_channel"),
)

# JSON-—Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def load_users():
    if os.path.exists(USERS_FILE):
        with open(USERS_FILE, "r") as f:
            return json.load(f)
    return []

def save_user(user_id):
    users = load_users()
    if user_id not in users:
        users.append(user_id)
        with open(USERS_FILE, "w") as f:
            json.dump(users, f)

# /start
@dp.message_handler(CommandStart())
async def start(message: types.Message):
    save_user(message.from_user.id)
    caption = "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–Ω–∞–ª—ã."
    try:
        with open("welcome.jpg", "rb") as photo:
            await message.answer_photo(photo=photo, caption=caption, reply_markup=reply_kb)
    except FileNotFoundError:
        await message.answer(caption, reply_markup=reply_kb)

# –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ "üì¢ –ö–∞–Ω–∞–ª—ã"
@dp.message_handler(lambda msg: msg.text == "üì¢ –ö–∞–Ω–∞–ª—ã")
async def show_channels(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –∫–∞–Ω–∞–ª:", reply_markup=inline_kb)

# –†–∞—Å—Å—ã–ª–∫–∞ –∏–∑ –∫–∞–Ω–∞–ª–∞
@dp.channel_post_handler()
async def forward_post(message: types.Message):
    users = load_users()
    try:
        channel = await bot.get_chat(message.chat.id)
        from_info = f"<b>üì¢ –ö–∞–Ω–∞–ª:</b> <i>{channel.title}</i>\n\n"
    except:
        from_info = ""

    content_text = message.caption or message.text or ""
    caption = from_info + content_text

    if len(caption) > 1024:
        caption = caption[:1020] + "..."

    for user_id in users:
        try:
            if message.photo:
                await bot.send_photo(user_id, photo=message.photo[-1].file_id, caption=caption)
            elif message.video:
                await bot.send_video(user_id, video=message.video.file_id, caption=caption)
            elif message.document:
                await bot.send_document(user_id, document=message.document.file_id, caption=caption)
            elif message.animation:
                await bot.send_animation(user_id, animation=message.animation.file_id, caption=caption)
            elif message.text:
                await bot.send_message(user_id, text=caption)
            else:
                await bot.send_message(user_id, text=from_info + "üìå –ù–æ–≤—ã–π –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ.")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è {user_id}: {e}")

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞
async def on_startup(app):
    print(f"üì° –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é Webhook –Ω–∞: {WEBHOOK_URL}")
    await bot.set_webhook(WEBHOOK_URL)

async def on_shutdown(app):
    await bot.delete_webhook()

app = get_new_configured_app(dispatcher=dp, path=WEBHOOK_PATH)
app.on_startup.append(on_startup)
app.on_shutdown.append(on_shutdown)

if __name__ == "__main__":
    web.run_app(app, host=WEBAPP_HOST, port=WEBAPP_PORT)