¬†import os
import json
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher.filters import CommandStart

API_TOKEN = os.getenv("API_TOKEN")
USERS_FILE = "users.json"

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –†–µ–ø–ª–∞–π-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
reply_kb = ReplyKeyboardMarkup(resize_keyboard=True)
reply_kb.add(KeyboardButton("üì¢ –ö–∞–Ω–∞–ª—ã"))

# –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
inline_kb = InlineKeyboardMarkup(row_width=1).add(
    InlineKeyboardButton("–°–ø–æ—Ä—Ç", url="https://t.me/sportsoda"),
    InlineKeyboardButton("–ù–æ–≤–æ—Å—Ç–∏ –ü—Ä–æ—Ñ–∫–æ–º–∞", url="https://t.me/profkomsoda"),
    InlineKeyboardButton("–û–¢–∏–ü–ë", url="https://t.me/your_invest_channel"),
    InlineKeyboardButton("–§–∞–±—Ä–∏–∫–∞ –∏–¥–µ–π", url="https://t.me/your_invest_channel"),
    InlineKeyboardButton("–ß—Ç–æ —Ç–∞–∫–æ–µ –ë–°–ê", url="https://t.me/your_invest_channel")
)

# –£–±–µ–¥–∏—Å—å, —á—Ç–æ —Ñ–∞–π–ª users.json —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if not os.path.exists(USERS_FILE):
    with open(USERS_FILE, "w") as f:
        json.dump([], f)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(CommandStart())
async def send_welcome(message: types.Message):
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ users.json
    with open(USERS_FILE, "r") as f:
        users = json.load(f)

    if message.from_user.id not in users:
        users.append(message.from_user.id)
        with open(USERS_FILE, "w") as f:
            json.dump(users, f)

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    caption = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∫–∞–Ω–∞–ª:"
    await message.answer(caption, reply_markup=reply_kb)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ö–∞–Ω–∞–ª—ã"
@dp.message_handler(lambda message: message.text == "üì¢ –ö–∞–Ω–∞–ª—ã")
async def show_channels(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª:", reply_markup=inline_kb)

# –†–ê–°–°–´–õ–ö–ê –∏–∑ –∫–∞–Ω–∞–ª–∞ ‚Äî –±–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–æ–º!
@dp.channel_post_handler()
async def forward_channel_post(message: types.Message):
    with open(USERS_FILE, "r") as f:
        users = json.load(f)

    for user_id in users:
        try:
            if message.content_type == "photo":
                await bot.send_photo(chat_id=user_id, photo=message.photo[-1].file_id, caption=message.caption or "")
            elif message.content_type == "video":
                await bot.send_video(chat_id=user_id, video=message.video.file_id, caption=message.caption or "")
            elif message.content_type == "document":
                await bot.send_document(chat_id=user_id, document=message.document.file_id, caption=message.caption or "")
            elif message.content_type == "text":
                await bot.send_message(chat_id=user_id, text=message.text)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)