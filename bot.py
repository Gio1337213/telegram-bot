import os
import asyncpg
import re
from aiohttp import web
from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher.filters import CommandStart
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.executor import start_webhook

API_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_HOST = os.getenv("WEBHOOK_HOST")  # –ü—Ä–∏–º–µ—Ä: https://your-app.onrender.com
DB_URL = os.getenv("DATABASE_URL")
ADMIN_ID = int(os.getenv("ADMIN_ID", 0))

WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"
WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = int(os.getenv("PORT", 8000))

bot = Bot(token=API_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot)
db_pool = None

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
reply_kb = ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton("üì¢ –ö–∞–Ω–∞–ª—ã"))
inline_kb = InlineKeyboardMarkup(row_width=1).add(
    InlineKeyboardButton("üèã Ô∏è –°–ø–æ—Ä—Ç", url="https://t.me/sportsoda"),
    InlineKeyboardButton("üìú –ü—Ä–æ—Ñ–∫–æ–º", url="https://t.me/profkomsoda"),
    InlineKeyboardButton("üìö –û–¢–∏–ü–ë", url="https://t.me/your_invest_channel"),
    InlineKeyboardButton("üí° –§–∞–±—Ä–∏–∫–∞ –∏–¥–µ–π", url="https://t.me/your_invest_channel")
)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
async def create_pool():
    return await asyncpg.create_pool(dsn=DB_URL)

async def add_user(user_id):
    async with db_pool.acquire() as conn:
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS users (
                id BIGINT PRIMARY KEY
            )
        """)
        await conn.execute("INSERT INTO users (id) VALUES ($1) ON CONFLICT DO NOTHING", user_id)

async def get_users():
    async with db_pool.acquire() as conn:
        rows = await conn.fetch("SELECT id FROM users")
        return [row["id"] for row in rows]

# –•–µ–Ω–¥–ª–µ—Ä—ã
@dp.message_handler(CommandStart())
async def start(message: types.Message):
    await add_user(message.from_user.id)
    try:
        with open("welcome.jpg", "rb") as photo:
            await message.answer_photo(photo, caption="üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–Ω–∞–ª—ã.", reply_markup=reply_kb)
    except FileNotFoundError:
        await message.answer("üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–Ω–∞–ª—ã.", reply_markup=reply_kb)

@dp.message_handler(lambda msg: msg.text == "üì¢ –ö–∞–Ω–∞–ª—ã")
async def channels(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –∫–∞–Ω–∞–ª:", reply_markup=inline_kb)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å—Ç–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–∞ (–≤–∫–ª—é—á–∞—è –º–µ–¥–∏–∞)
@dp.channel_post_handler(content_types=types.ContentType.ANY)
async def forward_post(message: types.Message):
    caption = message.caption or message.text or ""
    
    # –û—á–∏—Å—Ç–∫–∞ caption –æ—Ç —Å—Å—ã–ª–æ–∫ –Ω–∞ Telegram –∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π
    clean_caption = re.sub(r'https?://t\.me/\S+', '', caption)
    clean_caption = re.sub(r'@\w+', '', clean_caption)

    try:
        channel = await bot.get_chat(message.chat.id)
        if channel.username:
            post_link = f"https://t.me/{channel.username}/{message.message_id}"
            from_info = f'<b>üì¢ <a href="{post_link}">{channel.title}</a></b>\n\n'
        else:
            from_info = f"<b>üì¢ –ö–∞–Ω–∞–ª:</b> <i>{channel.title}</i>\n\n"
    except:
        from_info = ""

    full_caption = from_info + clean_caption.strip()
    if len(full_caption) > 1024:
        full_caption = full_caption[:1020] + "..."

    users = await get_users()

    for uid in users:
        try:
            if message.photo:
                await bot.send_photo(uid, message.photo[-1].file_id, caption=full_caption, disable_web_page_preview=True)
            elif message.video:
                await bot.send_video(uid, message.video.file_id, caption=full_caption, disable_web_page_preview=True)
            elif message.document:
                await bot.send_document(uid, message.document.file_id, caption=full_caption, disable_web_page_preview=True)
            elif message.animation:
                await bot.send_animation(uid, message.animation.file_id, caption=full_caption, disable_web_page_preview=True)
            elif message.text:
                await bot.send_message(uid, full_caption, disable_web_page_preview=True)
            else:
                await bot.send_message(uid, from_info + "üìå –ù–æ–≤—ã–π –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ.", disable_web_page_preview=True)
        except:
            pass  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É –¥–ª—è uid

# Webhook
async def on_startup(dp):
    global db_pool
    db_pool = await create_pool()
    await bot.set_webhook(WEBHOOK_URL)

async def on_shutdown(dp):
    await bot.delete_webhook()
    await bot.session.close()

if __name__ == '__main__':
    start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        skip_updates=True,
        host=WEBAPP_HOST,
        port=WEBAPP_PORT,
    )
