import os
import json
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher.filters import CommandStart

API_TOKEN = os.getenv("API_TOKEN")
USERS_FILE = "users.json"

bot = Bot(token=API_TOKEN, parse_mode="HTML")  # –≥–ª–æ–±–∞–ª—å–Ω–æ —Å—Ç–∞–≤–∏–º HTML
dp = Dispatcher(bot)

# –†–µ–ø–ª–∞–π-–∫–Ω–æ–ø–∫–∞
reply_kb = ReplyKeyboardMarkup(resize_keyboard=True)
reply_kb.add(KeyboardButton("üì¢ –ö–∞–Ω–∞–ª—ã"))

# –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
inline_kb = InlineKeyboardMarkup(row_width=1).add(
    InlineKeyboardButton("–°–ø–æ—Ä—Ç", url="https://t.me/sportsoda"),
    InlineKeyboardButton("–ù–æ–≤–æ—Å—Ç–∏ –ü—Ä–æ—Ñ–∫–æ–º–∞", url="https://t.me/profkomsoda"),
    InlineKeyboardButton("–û–¢–∏–ü–ë", url="https://t.me/your_invest_channel"),
    InlineKeyboardButton("–§–∞–±—Ä–∏–∫–∞ –∏–¥–µ–π", url="https://t.me/your_invest_channel"),
    InlineKeyboardButton("–ß—Ç–æ —Ç–∞–∫–æ–µ –ë–°–ê", url="https://t.me/your_invest_channel")
)

# –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ users.json –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
if not os.path.exists(USERS_FILE):
    with open(USERS_FILE, "w") as f:
        json.dump([], f)

# /start ‚Äî –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —é–∑–µ—Ä–∞
@dp.message_handler(CommandStart())
async def send_welcome(message: types.Message):
    with open(USERS_FILE, "r") as f:
        users = json.load(f)

    if message.from_user.id not in users:
        users.append(message.from_user.id)
        with open(USERS_FILE, "w") as f:
            json.dump(users, f)

    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=reply_kb)

# –ö–Ω–æ–ø–∫–∞ "–ö–∞–Ω–∞–ª—ã"
@dp.message_handler(lambda msg: msg.text == "üì¢ –ö–∞–Ω–∞–ª—ã")
async def show_channels(msg: types.Message):
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª:", reply_markup=inline_kb)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞ (–±–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–æ–º)
@dp.channel_post_handler()
async def forward_channel_post(message: types.Message):
    with open(USERS_FILE, "r") as f:
        users = json.load(f)

    # –ü–æ–¥–ø–∏—Å—å —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–∞–Ω–∞–ª–∞
    channel_title = message.chat.title
    base_caption = f"üì£ <b>–ü–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞:</b> <i>{channel_title}</i>\n\n"

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    content_text = message.caption or message.text or ""
    full_caption = base_caption + content_text

    # –°—Ä–µ–∑–∞–µ–º –µ—Å–ª–∏ –¥–ª–∏–Ω–Ω—ã–π caption
    if len(full_caption) > 1024:
        full_caption = full_caption[:1020] + "..."

    for user_id in users:
        try:
            if message.content_type == "photo":
                await bot.send_photo(user_id, message.photo[-1].file_id, caption=full_caption)
            elif message.content_type == "video":
                await bot.send_video(user_id, message.video.file_id, caption=full_caption)
            elif message.content_type == "document":
                await bot.send_document(user_id, message.document.file_id, caption=full_caption)
            elif message.content_type == "text":
                await bot.send_message(user_id, full_caption)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
