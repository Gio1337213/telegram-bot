import os
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

API_TOKEN = os.getenv("API_TOKEN")
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

USERS_FILE = "users.txt"

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def load_users():
    if not os.path.exists(USERS_FILE):
        return set()
    with open(USERS_FILE, 'r') as f:
        return set(map(int, f.read().split()))

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def save_user(user_id):
    users = load_users()
    if user_id not in users:
        with open(USERS_FILE, 'a') as f:
            f.write(f"{user_id}\n")

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞: –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ "–ö–∞–Ω–∞–ª—ã"
main_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
main_keyboard.add(KeyboardButton("üì¢ –ö–∞–Ω–∞–ª—ã"))

# Inline –∫–Ω–æ–ø–∫–∏-—Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã
inline_channels = InlineKeyboardMarkup(row_width=1)
inline_channels.add(
    InlineKeyboardButton("üèÄ –°–ø–æ—Ä—Ç", url="https://t.me/sportsoda"),
    InlineKeyboardButton("üóû –ù–æ–≤–æ—Å—Ç–∏ –ü—Ä–æ—Ñ–∫–æ–º–∞", url="https://t.me/profkomsoda"),
    InlineKeyboardButton("üíº –û–¢–∏–ü–ë", url="https://t.me/your_invest_channel"),
    InlineKeyboardButton("üí° –§–∞–±—Ä–∏–∫–∞ –∏–¥–µ–π", url="https://t.me/your_invest_channel"),
    InlineKeyboardButton("üìò –ß—Ç–æ —Ç–∞–∫–æ–µ –ë–°–ê", url="https://t.me/your_invest_channel")
)

@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    save_user(message.from_user.id)
    caption = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ ¬´–ö–∞–Ω–∞–ª—ã¬ª, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–ª–µ–∑–Ω—ã–º —Å—Å—ã–ª–∫–∞–º."
    with open("welcome.jpg", "rb") as photo:
        await message.answer_photo(photo, caption=caption, reply_markup=main_keyboard)

@dp.message_handler(lambda message: message.text == "üì¢ –ö–∞–Ω–∞–ª—ã")
async def channels_handler(message: types.Message):
    await message.answer("üîó –ù–∞—à–∏ –∫–∞–Ω–∞–ª—ã:", reply_markup=inline_channels)

# –ê–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∞ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–æ–≤
@dp.channel_post_handler()
async def handle_channel_post(message: types.Message):
    users = load_users()

    for user_id in users:
        try:
            if message.text:
                await bot.send_message(user_id, message.text)
            elif message.photo:
                await bot.send_photo(user_id, photo=message.photo[-1].file_id, caption=message.caption or "")
            elif message.video:
                await bot.send_video(user_id, video=message.video.file_id, caption=message.caption or "")
            elif message.document:
                await bot.send_document(user_id, document=message.document.file_id, caption=message.caption or "")
            elif message.animation:
                await bot.send_animation(user_id, animation=message.animation.file_id, caption=message.caption or "")
            else:
                print("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            continue

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
