import os
import json
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher.filters import CommandStart

API_TOKEN = os.getenv("API_TOKEN")  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤—å –≤ Render –∏–ª–∏ .env
USERS_FILE = "users.json"
WELCOME_IMAGE = "welcome.jpg"

bot = Bot(token=API_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot)

# –†–µ–ø–ª–∞–π-–∫–Ω–æ–ø–∫–∞
reply_kb = ReplyKeyboardMarkup(resize_keyboard=True)
reply_kb.add(KeyboardButton("üì¢ –ö–∞–Ω–∞–ª—ã"))

# –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
inline_kb = InlineKeyboardMarkup(row_width=1).add(
    InlineKeyboardButton("‚öΩ –°–ø–æ—Ä—Ç", url="https://t.me/sportsoda"),
    InlineKeyboardButton("üì£ –ü—Ä–æ—Ñ–∫–æ–º", url="https://t.me/profkomsoda"),
    InlineKeyboardButton("‚ö†Ô∏è –û–¢–∏–ü–ë", url="https://t.me/your_invest_channel"),
    InlineKeyboardButton("üí° –§–∞–±—Ä–∏–∫–∞ –∏–¥–µ–π", url="https://t.me/your_invest_channel"),
    InlineKeyboardButton("‚ùì –ß—Ç–æ —Ç–∞–∫–æ–µ –ë–°–ê", url="https://t.me/your_invest_channel")
)

# –°–æ–∑–¥–∞–Ω–∏–µ users.json –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
if not os.path.exists(USERS_FILE):
    with open(USERS_FILE, "w") as f:
        json.dump([], f)

# /start ‚Äî –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —é–∑–µ—Ä–∞ + –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
@dp.message_handler(CommandStart())
async def send_welcome(message: types.Message):
    with open(USERS_FILE, "r") as f:
        users = json.load(f)

    if message.from_user.id not in users:
        users.append(message.from_user.id)
        with open(USERS_FILE, "w") as f:
            json.dump(users, f)

    caption = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é:"
    try:
        with open(WELCOME_IMAGE, "rb") as photo:
            await message.answer_photo(photo, caption=caption, reply_markup=reply_kb)
    except FileNotFoundError:
        await message.answer(caption, reply_markup=reply_kb)

# –ö–Ω–æ–ø–∫–∞ "üì¢ –ö–∞–Ω–∞–ª—ã"
@dp.message_handler(lambda msg: msg.text == "üì¢ –ö–∞–Ω–∞–ª—ã")
async def show_channels(msg: types.Message):
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –∫–∞–Ω–∞–ª:", reply_markup=inline_kb)

# –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –ø–æ—Å—Ç–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–æ–≤
@dp.channel_post_handler()
async def forward_to_users(post: types.Message):
    users = load_users()

    # –ü–æ–¥–ø–∏—Å—å –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω channel username/title)
    try:
        channel = await bot.get_chat(post.chat.id)
        from_info = f"<b>üì¢ –ö–∞–Ω–∞–ª:</b> {channel.title}\n\n"
    except:
        from_info = ""

    for user_id in users:
        try:
            if post.text:
                await bot.send_message(user_id, from_info + post.text)
            elif post.photo:
                await bot.send_photo(user_id, post.photo[-1].file_id, caption=from_info + (post.caption or ""))
            elif post.video:
                await bot.send_video(user_id, post.video.file_id, caption=from_info + (post.caption or ""))
            elif post.document:
                await bot.send_document(user_id, post.document.file_id, caption=from_info + (post.caption or ""))
            elif post.animation:
                await bot.send_animation(user_id, post.animation.file_id, caption=from_info + (post.caption or ""))
            else:
                await bot.send_message(user_id, f"{from_info}üìå –ù–æ–≤—ã–π –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ.")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
