import os
import json
import asyncio
import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher.filters import CommandStart

API_TOKEN = os.getenv("API_TOKEN")
USERS_FILE = "users.json"

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–µ–º —Ä–µ–ø–ª–∞–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
reply_kb = ReplyKeyboardMarkup(resize_keyboard=True)
reply_kb.add(KeyboardButton("üì¢ –ö–∞–Ω–∞–ª—ã"))

# –ò–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–∞–Ω–∞–ª–∞–º–∏
inline_kb = InlineKeyboardMarkup(row_width=1).add(
    InlineKeyboardButton("–°–ø–æ—Ä—Ç", url="https://t.me/sportsoda"),
    InlineKeyboardButton("–ù–æ–≤–æ—Å—Ç–∏ –ü—Ä–æ—Ñ–∫–æ–º–∞", url="https://t.me/profkomsoda"),
    InlineKeyboardButton("–û–¢–∏–ü–ë", url="https://t.me/your_invest_channel"),
    InlineKeyboardButton("–§–∞–±—Ä–∏–∫–∞ –∏–¥–µ–π", url="https://t.me/your_invest_channel"),
    InlineKeyboardButton("–ß—Ç–æ —Ç–∞–∫–æ–µ –ë–°–ê", url="https://t.me/your_invest_channel")
)


def load_users():
    if not os.path.exists(USERS_FILE):
        return []
    with open(USERS_FILE, "r", encoding="utf-8") as f:
        try:
            return json.load(f)
        except json.JSONDecodeError:
            return []


def save_user(user_id):
    users = load_users()
    if user_id not in users:
        users.append(user_id)
        with open(USERS_FILE, "w", encoding="utf-8") as f:
            json.dump(users, f)


@dp.message_handler(CommandStart())
async def send_welcome(message: types.Message):
    save_user(message.from_user.id)
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∫–∞–Ω–∞–ª:",
        reply_markup=reply_kb
    )


@dp.message_handler(lambda message: message.text == "üì¢ –ö–∞–Ω–∞–ª—ã")
async def show_channels(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª:", reply_markup=inline_kb)


@dp.channel_post_handler()
async def forward_channel_post(message: types.Message):
    users = load_users()
    channel_name = message.chat.title or "–ö–∞–Ω–∞–ª"

    for user_id in users:
        try:
            caption = f"üì¢ <b>{channel_name}</b>\n\n{message.caption or message.text or ''}"

            if message.photo:
                await bot.send_photo(user_id, photo=message.photo[-1].file_id, caption=caption, parse_mode="HTML")
            elif message.video:
                await bot.send_video(user_id, video=message.video.file_id, caption=caption, parse_mode="HTML")
            elif message.document:
                await bot.send_document(user_id, document=message.document.file_id, caption=caption, parse_mode="HTML")
            elif message.text:
                await bot.send_message(user_id, text=caption, parse_mode="HTML")

            await asyncio.sleep(1.2)  # –∞–Ω—Ç–∏–∏-—Ñ–ª—É–¥ –ø–∞—É–∑–∞

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
